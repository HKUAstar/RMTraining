1. extra questions
Answer to extra question: copy-and-swap is more efficient, because it simply exchange the values of this and str_. No extra memory allocation and deletion is required.

2. Answer to extra questions:
    1. Number of threads in parallel version: 32 (world_size)
    2. expected improvement of performance: 32 times, as each task can be run concurrently, and each task has a load 1/32 of original size.
    3. Actual improvement of performance: 4.88334x, much slower than expectation. Reasoning: 
        Overheads of creating and managing threads, blocked waiting for other threads etc. restrict the speed of all threads.
        Also, there are not as many cores to run all threads concurrently.

    4. Bonus: 16 threads -> 4.043 times improvement;
    8 threads -> 3.50579 times improvement;
    4 threads -> 4.12158 times improvement;
    changing from 4 to 32 threads only give slight improvement, probably because no enough cores are availble.
    2 threads -> 1.77541 times improvement;
    1 thread -> 0.908775 times imporvement, showing overhead of parallele version can slow progress down.

3. Speed is increased by giving one lock per slot. It could be further increased by using semaphore to allow either multiple reads or one write to happen at any given time.